{"version":3,"file":"static/js/387.c88a39fb.chunk.js","mappings":"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","sources":["shared/hooks/useForm.js","components/Books/FormAddBook/fields.js","webpack://react-router-1/./src/components/Books/FormAddBook/form-add-book.module.scss?6404","components/Books/FormAddBook/FormAddBook.jsx","webpack://react-router-1/./src/components/Books/BookList/book-list.module.scss?58c8","components/Books/BookList/BookList.jsx","webpack://react-router-1/./src/components/Books/books.module.css?e947","components/Books/Books.jsx","reduxFirst/actions.js","pages/MyBooksPage/MyBooksPage.jsx","reduxFirst/selectors.js","webpack://react-router-1/./src/shared/components/TextField/text-field.module.css?f04f","shared/components/TextField/TextField.jsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import {useState} from \"react\";\r\n\r\nconst useForm = ({initialState, onSubmit}) => {\r\n    const [state, setState] = useState({...initialState});\r\n\r\n    const handleChange = ({target}) => {\r\n        const {value, name, type, checked} = target;\r\n        const newValue = type === \"checkbox\" ? checked : value;\r\n        setState(prevState => ({\r\n            ...prevState,\r\n            [name]: newValue,\r\n        }))\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        onSubmit({...state});\r\n        setState({...initialState});\r\n    };\r\n\r\n    return {state, setState, handleChange, handleSubmit}\r\n}\r\n\r\nexport default useForm;\r\n","const fields = {\r\n    title: {\r\n        label: \"Назва книги\",\r\n        name: \"title\",\r\n        type: \"text\",\r\n        placeholder: \"Введіть назву книги\",\r\n        required: true,\r\n    },\r\n    author: {\r\n        label: \"Автор книги\",\r\n        name: \"author\",\r\n        type: \"text\",\r\n        placeholder: \"Введіть автора книги\",\r\n        required: true,\r\n    },\r\n    favorite: {\r\n        label: \"Улюблена\",\r\n        name: \"favorite\",\r\n        type: \"checkbox\",\r\n    }\r\n}\r\n\r\nexport default fields;","// extracted by mini-css-extract-plugin\nexport default {\"btn\":\"form-add-book_btn__q5Gnw\"};","import { useMemo } from \"react\";\r\nimport { nanoid } from \"nanoid\"\r\n\r\nimport useForm from './../../../shared/hooks/useForm';\r\n\r\nimport TextField from \"../../../shared/components/TextField/TextField\";\r\nimport fields from \"./fields\";\r\n\r\nimport styles from \"./form-add-book.module.scss\";\r\n\r\nconst initialState = {\r\n    title: '',\r\n    author: '',\r\n    favoriteId: false,\r\n}\r\n\r\nexport default function FormAddBook({onSubmit}) {\r\n    const {state, handleChange, handleSubmit} = useForm({initialState, onSubmit});\r\n\r\n    const titleId = useMemo(()=> nanoid(), []);\r\n    const authorId = useMemo(()=> nanoid(), []);\r\n    const favoriteId = useMemo(()=> nanoid(), []);\r\n\r\n\r\n    const {title, author, favorite} = state;\r\n\r\n\r\n    return (\r\n    <form onSubmit={handleSubmit}>\r\n            <TextField id={titleId} value={title} handleChange={handleChange} {...fields.title} />\r\n            <TextField id={authorId} value={author} handleChange={handleChange} {...fields.author} />\r\n            <TextField id={favoriteId} checked={favorite} handleChange={handleChange} {...fields.favorite} />\r\n            {state.invalidForm ? <div>Будь ласка заповніть поля</div> : null}\r\n            <button className={styles.btn}>Додати книгу</button>\r\n    </form>\r\n    )\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"title\":\"book-list_title__U4196\",\"item\":\"book-list_item__eQTpv\",\"remove\":\"book-list_remove__3zb+7\"};","import PropTypes from \"prop-types\";\r\n\r\nimport styles from \"./book-list.module.scss\";\r\n\r\nconst BookList = ({items, removeBook}) => {\r\n    const elements = items?.map(({id, title, author}) => (\r\n        <li key={id} className={styles.item}>\r\n            {title}. Автор: {author}\r\n            <span onClick={() => removeBook(id)} className={styles.remove}>X</span>\r\n        </li>\r\n    ));\r\n\r\n    return (\r\n        <>\r\n            <h4 className={styles.title}>Список книг</h4>\r\n            <ol>\r\n                {elements}\r\n            </ol>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default BookList;\r\n\r\nBookList.defaultProps = {\r\n    items: []\r\n}\r\n\r\nBookList.propTypes = {\r\n    items: PropTypes.arrayOf(PropTypes.shape({\r\n        id: PropTypes.string.isRequired,\r\n        title: PropTypes.string.isRequired,\r\n        author: PropTypes.string.isRequired,\r\n    }))\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"books_container__cCLJo\",\"title\":\"books_title__yUgK5\",\"row\":\"books_row__MQKB9\",\"column\":\"books_column__NZgbU\",\"filter\":\"books_filter__R7PWD\"};","import FormAddBook from \"./FormAddBook/FormAddBook\";\r\nimport BookList from \"./BookList/BookList\";\r\nimport { nanoid } from \"nanoid\";\r\nimport styles from \"./books.module.css\"\r\nimport { useState, useEffect } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { getBooks, getFilter } from \"../../reduxFirst/selectors\";\r\nimport { addBook, removeBook, setFilter } from \"../../reduxFirst/actions\";\r\n\r\n\r\nexport default function Books() {\r\n  const books = useSelector(getBooks);\r\n  const filter = useSelector(getFilter);\r\n  const dispatch = useDispatch();\r\n  // const [books, setBooks] = useState(() => {\r\n  //   const value = JSON.parse(localStorage.getItem(\"books\"));\r\n  //   return value ?? [];\r\n  // });\r\n  // const [filter, setFilter] = useState(\"\");\r\n\r\n  // useEffect(() => {\r\n  //   localStorage.setItem(\"books\", JSON.stringify(books));\r\n  // }, [books])\r\n\r\n  // useEffect(() => {\r\n  //   return () => {\r\n  //     localStorage.removeItem(\"books\");\r\n  //   }\r\n  // }, [])\r\n\r\n  const onAddBook = (book) => {\r\n    if (isDuplicate(book)) {\r\n        return alert(`${book.title} - ${book.author} is already on the site`);\r\n    }\r\n    const action = addBook(book);\r\n    dispatch(action);\r\n  }\r\n\r\n  const onRemoveBook = (id) => {\r\n    const action = removeBook(id);\r\n    dispatch(action);\r\n  }\r\n\r\n  const handleChange = (e) => {\r\n    const { value } = e.target;\r\n    dispatch(setFilter(value));\r\n  }\r\n\r\n  const isDuplicate = ({title, author}) => {\r\n    const result = books.find((item) => item.title === title && item.author === author);\r\n    return result;\r\n  }\r\n\r\n  const getFilteredBooks = () => {   \r\n    if (!filter) {\r\n        return books;\r\n    }\r\n\r\n    const normalizedFilter = filter.toLocaleLowerCase();\r\n    const filteredBooks = books.filter(({title, author}) => {\r\n        const normalizedTitle = title.toLocaleLowerCase();\r\n        const normalizedAuthor = author.toLocaleLowerCase();\r\n        const result = normalizedTitle.includes(normalizedFilter) || normalizedAuthor.includes(normalizedFilter);\r\n        return result;\r\n    })\r\n\r\n    return filteredBooks;\r\n  }\r\n\r\n  const filteredBooks = getFilteredBooks();\r\n\r\n  return (\r\n    <div className={styles.container}>\r\n      <h2 className={styles.title}>Мої книги</h2>\r\n      <div className={styles.row}>\r\n          <div className={styles.column}>\r\n              <FormAddBook onSubmit={onAddBook} />\r\n          </div>\r\n      <div className={styles.column}>\r\n          <input type=\"text\" name=\"filter\" onChange={handleChange} value={filter} className={styles.filter} placeholder=\"Фільтр\" />\r\n          <BookList items={filteredBooks} removeBook={onRemoveBook} />\r\n      </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\n// export default class Books extends Component {\r\n//   state = {\r\n//     books: [],\r\n//     filter: '',\r\n//   }\r\n\r\n  // componentDidMount() {\r\n  //   const books = JSON.parse(localStorage.getItem(\"books\"));\r\n  //   if (books?.length) {\r\n  //     this.setState({\r\n  //       books,\r\n  //     })\r\n  //   }\r\n  // }\r\n\r\n  // componentDidUpdate(prevProps, prevState, snapshot) {\r\n  //   console.log('componentDidUpdate, snapshot', snapshot);\r\n  //   const { books } = this.state;\r\n  //   if (prevState.books !== books) {\r\n  //     localStorage.setItem(\"books\", JSON.stringify(books));\r\n  //   }\r\n  // }\r\n\r\n  // componentWillUnmount() {\r\n  //   console.log('componentWillUnmount');\r\n  //   localStorage.removeItem(\"books\");\r\n  // }\r\n\r\n//   addBook = (book) => {\r\n//     if (this.isDuplicate(book)) {\r\n//         return alert(`${book.title} - ${book.author} is already on the site`);\r\n//     }\r\n\r\n//     this.setState((prev) => {\r\n//         const newBook = {\r\n//             id: nanoid(),\r\n//             ...book\r\n//         }\r\n//         return {\r\n//             books: [...prev.books, newBook]\r\n//         }\r\n//     })\r\n//   }\r\n\r\n//   removeBook = (id) => {\r\n//     this.setState((prev) => {\r\n//         const newBooks = prev.books.filter((item) => item.id !== id);\r\n\r\n//         return {\r\n//             books: newBooks\r\n//         }\r\n//     })\r\n//   }\r\n\r\n//   handleChange = (e) => {\r\n//     const { name, value } = e.target;\r\n//     this.setState({\r\n//         [name]: value\r\n//     })\r\n//   }\r\n\r\n//   isDuplicate({title, author}) {\r\n//     const { books } = this.state;\r\n//     const result = books.find((item) => item.title === title && item.author === author);\r\n//     return result;\r\n//   }\r\n\r\n//   getFilteredBooks() {\r\n//     const { books, filter } = this.state;\r\n    \r\n//     if (!filter) {\r\n//         return books;\r\n//     }\r\n\r\n//     const normalizedFilter = filter.toLocaleLowerCase();\r\n//     const filteredBooks = books.filter(({title, author}) => {\r\n//         const normalizedTitle = title.toLocaleLowerCase();\r\n//         const normalizedAuthor = author.toLocaleLowerCase();\r\n//         const result = normalizedTitle.includes(normalizedFilter) || normalizedAuthor.includes(normalizedFilter);\r\n//         return result;\r\n//     })\r\n\r\n//     return filteredBooks;\r\n//   }\r\n\r\n\r\n//   render() {\r\n//     const { addBook, removeBook, handleChange } = this;\r\n//     const { filter } = this.state;\r\n//     const books = this.getFilteredBooks();\r\n//     return (\r\n//       <div className={styles.container}>\r\n//         <h2 className={styles.title}>Мої книги</h2>\r\n//         <div className={styles.row}>\r\n//             <div className={styles.column}>\r\n//                 <FormAddBook onSubmit={addBook} />\r\n//             </div>\r\n//         <div className={styles.column}>\r\n//             <input type=\"text\" name=\"filter\" onChange={handleChange} value={filter} className={styles.filter} placeholder=\"Фільтр\" />\r\n//             <BookList items={books} removeBook={removeBook} />\r\n//         </div>\r\n//         </div>\r\n//       </div>\r\n//     )\r\n//   }\r\n// }\r\n","import { nanoid } from \"nanoid\";\r\nimport { ADD_BOOK, REMOVE_BOOK, SET_FILTER } from \"./types\";\r\n\r\nexport const addBook = payload => {\r\n    return {\r\n        type: ADD_BOOK, \r\n        payload: {\r\n            id: nanoid(),\r\n            ...payload\r\n        },\r\n    }\r\n}\r\n\r\nexport const removeBook = payload => {\r\n    return {\r\n        type: REMOVE_BOOK,\r\n        payload,\r\n    }\r\n}\r\n\r\nexport const setFilter = payload => {\r\n    return {\r\n        type: SET_FILTER,\r\n        payload\r\n    }\r\n}","import Books from \"../../components/Books/Books\";\r\n\r\nexport default function MyBooksPage() {\r\n  return (\r\n    <>\r\n      <Books />\r\n    </>\r\n  )\r\n}\r\n","export const getBooks = store => store.books;\r\n\r\nexport const getFavoriteBooks = ({books}) => {\r\n    return books.filter(book => book.favorite)\r\n}\r\n\r\nexport const getFilter = store => store.filter;","// extracted by mini-css-extract-plugin\nexport default {\"formGroup\":\"text-field_formGroup__wQAcd\",\"field\":\"text-field_field__gzYPx\"};","import PropTypes from \"prop-types\";\r\n\r\nimport styles from \"./text-field.module.css\";\r\n\r\nconst TextField = ({id, label, value, name, handleChange, type, checked, className, placeholder, required, pattern}) => {\r\n    const fullClassName = className ? `${styles.field} ${className}` : styles.field;\r\n\r\n    return (\r\n        <div className={styles.formGroup}>\r\n            {label && <label htmlFor={id}>{label}</label>}\r\n            <input id={id} value={value} checked={checked} name={name} onChange={handleChange} type={type} className={fullClassName} placeholder={placeholder} required={required} pattern={pattern} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TextField;\r\n\r\nTextField.defaultProps = {\r\n    type: \"text\",\r\n    required: false,\r\n}\r\n\r\nTextField.propTypes = {\r\n    id: PropTypes.string, \r\n    label: PropTypes.string, \r\n    // value: PropTypes.string, \r\n    name: PropTypes.string.isRequired, \r\n    handleChange: PropTypes.func.isRequired, \r\n    type: PropTypes.string, \r\n    className: PropTypes.string, \r\n    placeholder: PropTypes.string,  \r\n    required: PropTypes.bool, \r\n    pattern: PropTypes.string,\r\n}","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["initialState","onSubmit","useState","state","setState","handleChange","target","value","name","type","checked","newValue","prevState","handleSubmit","e","preventDefault","title","label","placeholder","required","author","favorite","favoriteId","FormAddBook","useForm","titleId","useMemo","nanoid","authorId","TextField","id","fields","invalidForm","className","styles","BookList","items","removeBook","elements","map","onClick","defaultProps","Books","books","useSelector","getBooks","filter","getFilter","dispatch","useDispatch","isDuplicate","find","item","filteredBooks","normalizedFilter","toLocaleLowerCase","normalizedTitle","normalizedAuthor","includes","getFilteredBooks","book","alert","payload","action","ADD_BOOK","onChange","SET_FILTER","REMOVE_BOOK","MyBooksPage","store","getFavoriteBooks","pattern","fullClassName","htmlFor","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}